// gui1.js - c·∫≠p nh·∫≠t ph·∫ßn ki·ªÉm tra tr·∫°ng th√°i game
document.addEventListener('DOMContentLoaded', function() {
    // Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser) {
        document.getElementById('userInfo').textContent = 
            `Xin ch√†o ${currentUser.fullname} (${currentUser.username})`;
    }

    // Ki·ªÉm tra tr·∫°ng th√°i game tr∆∞·ªõc khi cho ch∆°i
    checkGameStatus();

    // Logic k√©o th·∫£ (gi·ªØ nguy√™n)
    const draggables = document.querySelectorAll('.draggable');
    const dropZone = document.getElementById('dropZone');
    const dropArea = document.getElementById('dropArea');
    const submitBtn = document.getElementById('submitBtn');

    let draggedItems = [];

    // Th√™m event listeners cho c√°c ph·∫ßn t·ª≠ c√≥ th·ªÉ k√©o
    draggables.forEach(draggable => {
        draggable.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('text/plain', this.dataset.item);
            this.classList.add('opacity-50');
        });

        draggable.addEventListener('dragend', function() {
            this.classList.remove('opacity-50');
        });
    });

    // Cho ph√©p th·∫£
    dropZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('bg-blue-900');
    });

    dropZone.addEventListener('dragleave', function() {
        this.classList.remove('bg-blue-900');
    });

    // X·ª≠ l√Ω th·∫£
    dropZone.addEventListener('drop', function(e) {
        e.preventDefault();
        this.classList.remove('bg-blue-900');
        
        const itemId = e.dataTransfer.getData('text/plain');
        const itemElement = document.querySelector(`[data-item="${itemId}"]`);
        
        if (itemElement && !document.querySelector(`#dropArea [data-item="${itemId}"]`)) {
            const clonedItem = itemElement.cloneNode(true);
            clonedItem.classList.remove('draggable');
            clonedItem.classList.add('m-2');
            clonedItem.setAttribute('style', 'position: relative;');
            
            // Th√™m v·ªã tr√≠ ng·∫´u nhi√™n ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng th·∫£
            const rect = dropArea.getBoundingClientRect();
            const x = Math.random() * (rect.width - 100);
            const y = Math.random() * (rect.height - 50);
            clonedItem.style.left = x + 'px';
            clonedItem.style.top = y + 'px';
            
            dropArea.appendChild(clonedItem);
            
            // L∆∞u th√¥ng tin v·ªã tr√≠
            draggedItems.push({
                id: itemId,
                x: x,
                y: y
            });
        }
    });

    // X·ª≠ l√Ω submit - c·∫≠p nh·∫≠t ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i game
    submitBtn.addEventListener('click', function() {
        // Ki·ªÉm tra l·∫°i tr·∫°ng th√°i game
        checkGameStatusBeforeSubmit();
    });

    // H√†m ki·ªÉm tra tr·∫°ng th√°i game
    function checkGameStatus() {
        const backendUrl = getBackendUrl();
        const statusUrl = `${backendUrl}/api/game/status`;
        
        fetch(statusUrl)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.session.isActive) {
                    // Game ƒëang active, cho ph√©p ch∆°i
                    enableGameInterface();
                } else {
                    // Game ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c ƒë√£ k·∫øt th√∫c
                    disableGameInterface('üéÆ Game ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c ƒë√£ k·∫øt th√∫c!');
                }
            })
            .catch(error => {
                console.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i game:', error);
                disableGameInterface('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!');
            });
    }

    // H√†m ki·ªÉm tra tr∆∞·ªõc khi submit
    function checkGameStatusBeforeSubmit() {
        const backendUrl = getBackendUrl();
        const statusUrl = `${backendUrl}/api/game/status`;
        
        fetch(statusUrl)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.session.isActive) {
                    // Game c√≤n active, cho ph√©p submit
                    if (draggedItems.length > 0) {
                        const gameData = {
                            user: currentUser,
                            items: draggedItems,
                            timestamp: new Date().toISOString()
                        };
                        sendToBackend(gameData);
                    } else {
                        alert('Vui l√≤ng k√©o √≠t nh·∫•t 1 ƒë·ªëi t∆∞·ª£ng v√†o khu v·ª±c th·∫£!');
                    }
                } else {
                    alert('üéÆ Game ƒë√£ k·∫øt th√∫c!');
                    disableGameInterface('üéÆ Game ƒë√£ k·∫øt th√∫c!');
                }
            })
            .catch(error => {
                console.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i game:', error);
                alert('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!');
            });
    }

    // H√†m b·∫≠t giao di·ªán game
    function enableGameInterface() {
        const dropZone = document.getElementById('dropZone');
        const submitBtn = document.getElementById('submitBtn');
        
        if (dropZone) dropZone.classList.remove('opacity-50', 'pointer-events-none');
        if (submitBtn) submitBtn.disabled = false;
        if (submitBtn) submitBtn.classList.remove('opacity-50');
    }

    // H√†m t·∫Øt giao di·ªán game
    function disableGameInterface(message) {
        const dropZone = document.getElementById('dropZone');
        const submitBtn = document.getElementById('submitBtn');
        const userInfo = document.getElementById('userInfo');
        
        if (dropZone) dropZone.classList.add('opacity-50', 'pointer-events-none');
        if (submitBtn) submitBtn.disabled = true;
        if (submitBtn) submitBtn.classList.add('opacity-50');
        if (userInfo) userInfo.innerHTML += `<br><span class="text-red-400">${message}</span>`;
    }

    // H√†m g·ª≠i d·ªØ li·ªáu l√™n backend
    function sendToBackend(gameData) {
        const backendUrl = getBackendUrl();
        const resultsUrl = `${backendUrl}/api/results`;
        
        fetch(resultsUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(gameData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('‚úÖ ƒê√£ g·ª≠i k·∫øt qu·∫£ th√†nh c√¥ng!');
                // Reset drag items
                draggedItems = [];
                dropArea.innerHTML = '';
            } else {
                alert(`‚ùå ${data.message}`);
            }
        })
        .catch(error => {
            console.error('L·ªói khi g·ª≠i d·ªØ li·ªáu:', error);
            alert('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi server!');
        });
    }

    // H√†m x√°c ƒë·ªãnh URL backend d·ª±a tr√™n m√¥i tr∆∞·ªùng
    function getBackendUrl() {
        // N·∫øu ƒëang ch·∫°y local (localhost)
        if (window.location.hostname === 'localhost' || 
            window.location.hostname === '127.0.0.1' || 
            window.location.hostname === '0.0.0.0') {
            return 'http://localhost:3000';
        } 
        // N·∫øu ƒëang ch·∫°y tr√™n web (production)
        else {
            return 'https://gamedragndrop-backend.onrender.com';
        }
    }
});